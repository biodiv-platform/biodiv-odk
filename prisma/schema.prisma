generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accepted_synonym {
  id                                                                    BigInt              @id
  version                                                               BigInt
  accepted_id                                                           BigInt
  synonym_id                                                            BigInt
  taxonomy_definition_accepted_synonym_accepted_idTotaxonomy_definition taxonomy_definition @relation("accepted_synonym_accepted_idTotaxonomy_definition", fields: [accepted_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkf05ceb6330c91a49")
  taxonomy_definition_accepted_synonym_synonym_idTotaxonomy_definition  taxonomy_definition @relation("accepted_synonym_synonym_idTotaxonomy_definition", fields: [synonym_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkf05ceb6357b8c415")

  @@unique([synonym_id, accepted_id])
  @@unique([synonym_id, accepted_id], map: "unique_accepted_id")
}

model activity_feed {
  id                   BigInt   @id
  activity_descrption  String?  @db.VarChar(2000)
  activity_holder_id   BigInt?
  activity_holder_type String?  @db.VarChar(255)
  activity_type        String?  @db.VarChar(255)
  author_id            BigInt
  date_created         DateTime @db.Timestamp(6)
  last_updated         DateTime @db.Timestamp(6)
  root_holder_id       BigInt?
  root_holder_type     String?  @db.VarChar(255)
  sub_root_holder_id   BigInt?
  sub_root_holder_type String?  @db.VarChar(255)
  is_showable          Boolean?
  activity_root_type   String?  @db.VarChar(255)
  version              BigInt?

  @@index([root_holder_type, activity_type, is_showable, date_created])
  @@index([last_updated], map: "last_updated_idx")
  @@index([last_updated], map: "lastupdated_index")
  @@index([root_holder_id], map: "root_holder_id_idx")
  @@index([root_holder_type], map: "root_holder_type_idx")
  @@index([root_holder_id], map: "rootholderid_index")
  @@index([root_holder_type], map: "rootholdertype_index")
  @@index([sub_root_holder_id], map: "sub_root_holder_id_idx")
  @@index([sub_root_holder_type], map: "sub_root_holder_type_idx")
  @@index([sub_root_holder_id], map: "subrootholderid_index")
  @@index([sub_root_holder_type], map: "subrootholdertype_index")
}

model bibtex_field_type {
  id         BigInt  @id
  field_type String? @db.VarChar(255)
}

model bibtex_item_field_mapping {
  id           BigInt   @id @default(autoincrement())
  field_id     BigInt?
  is_required  Boolean?
  item_type_id BigInt?
}

model bibtex_item_type {
  id        BigInt  @id
  item_type String? @db.VarChar(255)
}

model cca_permission_request {
  id               BigInt    @id
  cca_id           BigInt?
  encryptkey       String?   @db.VarChar(255)
  owner_id         BigInt?
  requested_on     DateTime? @db.Timestamp(6)
  requestor_id     BigInt?
  requestormessage String?   @db.VarChar(255)
  role             String?   @db.VarChar(255)
  short_name       String?   @db.VarChar(255)
}

model character_entity {
  name String  @id
  ch   String? @unique @db.Char(1)
}

model classification {
  id                                          BigInt                                        @id
  version                                     BigInt
  name                                        String                                        @unique @db.VarChar(255)
  citation                                    String?                                       @db.VarChar(255)
  language_id                                 BigInt
  language                                    language                                      @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "language_id")
  taxonomy_registry_backup_without_correction taxonomy_registry_backup_without_correction[]
}

model comment {
  id                  BigInt   @id
  author_id           BigInt
  body                String
  comment_holder_id   BigInt
  comment_holder_type String   @db.VarChar(255)
  date_created        DateTime @db.Timestamp(6)
  last_updated        DateTime @db.Timestamp(6)
  root_holder_id      BigInt
  root_holder_type    String   @db.VarChar(255)
  main_parent_id      BigInt?
  parent_id           BigInt?
  language_id         BigInt

  @@index([comment_holder_id], map: "comment_holder_id_idx")
  @@index([comment_holder_type], map: "comment_holder_type_idx")
  @@index([last_updated], map: "comment_lastupdated_index")
  @@index([root_holder_id], map: "comment_rootholderid_index")
  @@index([root_holder_type], map: "comment_rootholdertype_index")
  @@index([comment_holder_id], map: "commentholderid_index")
  @@index([comment_holder_type], map: "commentholdertype_index")
}

model common_names {
  id                  BigInt              @id
  language_id         BigInt?
  name                String              @db.VarChar(255)
  taxon_concept_id    BigInt
  upload_time         DateTime?           @db.Timestamp(6)
  uploader_id         BigInt?
  transliteration     String?             @db.VarChar(255)
  status              String?             @db.VarChar(255)
  position            String?             @db.VarChar(255)
  author_year         String?             @db.VarChar(255)
  match_database_name String?             @db.VarChar(255)
  match_id            String?             @db.VarChar(255)
  ibp_source          String?             @db.VarChar(255)
  via_datasource      String?             @db.VarChar(255)
  lowercase_name      String?             @db.VarChar(255)
  name_source_id      String?             @db.VarChar(255)
  is_deleted          Boolean             @default(false)
  is_preffered        Boolean?
  language            language?           @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk1b2d07f4a2a94b4c")
  taxonomy_definition taxonomy_definition @relation(fields: [taxon_concept_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk1b2d07f4b3cf407d")
  suser               suser?              @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk1b2d07f4bf80ff76")

  @@unique([taxon_concept_id, language_id, name], map: "common_names_taxon_concept_id_key")
  @@unique([taxon_concept_id, language_id, name], map: "unique_name")
  @@index([lowercase_name], map: "common_names_lowercase_name")
}

model contributor {
  id      BigInt  @id
  name    String
  user_id BigInt?
}

model country {
  id              BigInt @id
  country_name    String @db.VarChar(255)
  two_letter_code String @unique @db.VarChar(255)
}

model coverage {
  id         BigInt  @id
  latitude   Float?
  longitude  Float?
  place_name String? @db.VarChar(255)
}

model custom_field {
  id                    BigInt   @id
  allowed_multiple      Boolean?
  allowed_participation Boolean?
  author_id             BigInt?
  data_type             String?  @db.VarChar(255)
  default_value         String?  @db.VarChar(255)
  display_order         Int?
  is_mandatory          Boolean?
  name                  String?  @db.VarChar(255)
  notes                 String?  @db.VarChar(255)
  options               String?  @db.VarChar(255)
  user_group_id         BigInt?
  version               BigInt?
}

model custom_field_values {
  id              BigInt  @id
  author_id       BigInt?
  custom_field_id BigInt?
  icon_url        String? @db.VarChar(255)
  notes           String? @db.VarChar(255)
  value           String? @db.VarChar(255)
}

model custom_fields {
  id         BigInt  @id
  author_id  BigInt?
  data_type  String? @db.VarChar(255)
  field_type String? @db.VarChar(255)
  icon_url   String? @db.VarChar(255)
  name       String? @db.VarChar(255)
  notes      String? @db.VarChar(255)
  units      String? @db.VarChar(255)
}

model data_package {
  id                       BigInt     @id
  version                  BigInt
  allowed_data_table_types String
  author_id                BigInt
  created_on               DateTime   @db.Timestamp(6)
  description              String
  is_deleted               Boolean
  last_revised             DateTime   @db.Timestamp(6)
  supporting_modules       String?
  title                    String     @db.VarChar(255)
  has_role_user_allowed    Boolean?
  uploader_ids             String?    @db.VarChar(255)
  suser                    suser      @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fka7b680b1d7a6cb39")
  dataset1                 dataset1[]
}

model data_table {
  id                                              BigInt                   @id
  version                                         BigInt
  access_license_id                               BigInt
  access_rights                                   String?
  agree_terms                                     Boolean
  checklist_id                                    BigInt?
  columns                                         String
  created_on                                      DateTime                 @db.Timestamp(6)
  custom_fields                                   String?
  data_table_type                                 String                   @db.VarChar(255)
  dataset_id                                      BigInt?
  description                                     String?
  external_id                                     String?                  @db.VarChar(255)
  external_url                                    String?                  @db.VarChar(255)
  feature_count                                   Int
  flag_count                                      Int
  geographical_coverage_geo_privacy               Boolean
  geographical_coverage_latitude                  Float
  geographical_coverage_location_accuracy         String?                  @db.VarChar(255)
  geographical_coverage_location_scale            String                   @db.VarChar(255)
  geographical_coverage_longitude                 Float
  geographical_coverage_place_name                String?
  geographical_coverage_topology                  Unsupported("geometry")?
  is_deleted                                      Boolean
  language_id                                     BigInt
  last_revised                                    DateTime                 @db.Timestamp(6)
  methods                                         String?
  party_attributions                              String?
  party_contributor_id                            BigInt
  party_uploader_id                               BigInt
  project                                         String?
  rating                                          Int
  taxonomic_coverage_group_ids                    String                   @db.VarChar(255)
  temporal_coverage_from_date                     DateTime?                @db.Timestamp(6)
  temporal_coverage_to_date                       DateTime?                @db.Timestamp(6)
  title                                           String
  u_file_id                                       BigInt
  uploader_id                                     BigInt
  via_code                                        String?                  @db.VarChar(255)
  via_id                                          String?                  @db.VarChar(255)
  temporal_coverage_date_accuracy                 String?                  @db.VarChar(100)
  upload_log_id                                   BigInt?
  trait_value_file_id                             BigInt?
  summary                                         String                   @db.VarChar(10000)
  images_file_id                                  BigInt?
  basis_of_data                                   String?                  @db.VarChar(255)
  basis_of_record                                 String?                  @db.VarChar(255)
  field_mapping                                   String?                  @db.VarChar(255)
  is_verified                                     Boolean?
  upload_log_data_table_upload_log_idToupload_log upload_log?              @relation("data_table_upload_log_idToupload_log", fields: [upload_log_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ufile_data_table_u_file_idToufile               ufile                    @relation("data_table_u_file_idToufile", fields: [u_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk608fa6f934c02b86")
  ufile_data_table_images_file_idToufile          ufile?                   @relation("data_table_images_file_idToufile", fields: [images_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk608fa6f97145fa89")
  ufile_data_table_trait_value_file_idToufile     ufile?                   @relation("data_table_trait_value_file_idToufile", fields: [trait_value_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk608fa6f999501411")
  language                                        language                 @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk608fa6f9a2a94b4c")
  suser                                           suser                    @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk608fa6f9bf80ff76")
  dataset1                                        dataset1?                @relation(fields: [dataset_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk608fa6f9e8469043")
  species_data_table                              species_data_table[]     @ignore
  upload_log_upload_log_data_table_idTodata_table upload_log[]             @relation("upload_log_data_table_idTodata_table")
}

model dataset {
  id                                          BigInt   @id
  version                                     BigInt
  additional_info                             String?
  author_id                                   BigInt
  created_on                                  DateTime @db.Timestamp(6)
  data_language_id                            BigInt
  datasource_id                               BigInt
  description                                 String
  external_id                                 String?  @db.VarChar(255)
  external_url                                String?  @db.VarChar(255)
  geographic_description                      String?  @db.VarChar(255)
  is_deleted                                  Boolean
  language_id                                 BigInt
  last_revised                                DateTime @db.Timestamp(6)
  license_id                                  BigInt
  original_author_id                          BigInt?
  publication_date                            DateTime @db.Timestamp(6)
  purpose                                     String?
  rights                                      String?
  title                                       String   @db.VarChar(255)
  type                                        String   @db.VarChar(255)
  u_file_id                                   BigInt?
  via_code                                    String?  @db.VarChar(255)
  via_id                                      String?  @db.VarChar(255)
  attribution                                 String
  license                                     license  @relation(fields: [license_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5605b47813516b48")
  ufile                                       ufile?   @relation(fields: [u_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5605b47834c02b86")
  language_dataset_data_language_idTolanguage language @relation("dataset_data_language_idTolanguage", fields: [data_language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5605b4785ed86a37")
  language_dataset_language_idTolanguage      language @relation("dataset_language_idTolanguage", fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5605b478a2a94b4c")
  suser                                       suser    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5605b478d7a6cb39")
}

model dataset1 {
  id                                      BigInt                   @id
  version                                 BigInt
  access_license_id                       BigInt
  access_rights                           String?
  created_on                              DateTime                 @db.Timestamp(6)
  custom_fields                           String?
  data_package_id                         BigInt
  description                             String?
  external_id                             String?                  @db.VarChar(255)
  external_url                            String?                  @db.VarChar(255)
  feature_count                           Int
  flag_count                              Int
  geographical_coverage_geo_privacy       Boolean
  geographical_coverage_latitude          Float
  geographical_coverage_location_accuracy String?                  @db.VarChar(255)
  geographical_coverage_location_scale    String                   @db.VarChar(255)
  geographical_coverage_longitude         Float
  geographical_coverage_place_name        String?
  geographical_coverage_topology          Unsupported("geometry")?
  is_deleted                              Boolean
  language_id                             BigInt
  last_revised                            DateTime                 @db.Timestamp(6)
  methods                                 String?
  party_attributions                      String?
  party_contributor_id                    BigInt
  party_uploader_id                       BigInt
  project                                 String?
  rating                                  Int
  taxonomic_coverage_group_ids            String                   @db.VarChar(255)
  temporal_coverage_from_date             DateTime                 @db.Timestamp(6)
  temporal_coverage_to_date               DateTime?                @db.Timestamp(6)
  title                                   String
  u_file_id                               BigInt?
  uploader_id                             BigInt
  via_code                                String?                  @db.VarChar(255)
  via_id                                  String?                  @db.VarChar(255)
  temporal_coverage_date_accuracy         String?                  @db.VarChar(100)
  summary                                 String                   @db.VarChar(5000)
  data_table                              data_table[]
  ufile                                   ufile?                   @relation(fields: [u_file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6ab0dab934c02b86")
  data_package                            data_package             @relation(fields: [data_package_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6ab0dab9838c205d")
  language                                language                 @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6ab0dab9a2a94b4c")
  suser                                   suser                    @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6ab0dab9bf80ff76")
}

model discussion {
  id            BigInt   @id
  agree_terms   Boolean
  author_id     BigInt
  body          String
  created_on    DateTime @db.Timestamp(6)
  feature_count Int
  flag_count    Int
  is_deleted    Boolean
  language_id   BigInt
  last_revised  DateTime @db.Timestamp(6)
  plain_text    String
  subject       String
  visit_count   BigInt
  version       BigInt
  language      language @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk2a233828a2a94b4c")
  suser         suser    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk2a233828d7a6cb39")
}

model doc_sci_name {
  id               BigInt  @id
  canonical_form   String? @db.VarChar(255)
  display_order    Int
  document_id      BigInt
  frequency        Int
  offset_values    String
  scientific_name  String  @db.VarChar(255)
  taxon_concept_id BigInt?
  is_deleted       Boolean @default(false)
}

model document {
  id                     BigInt                   @id
  agree_terms            Boolean
  attribution            String?
  author_id              BigInt?
  contributors           String?
  created_on             DateTime                 @db.Timestamp(6)
  notes                  String?
  doi                    String?                  @db.VarChar(255)
  last_revised           DateTime                 @db.Timestamp(6)
  license_id             BigInt
  title                  String
  type                   String?
  u_file_id              BigInt?
  from_date              DateTime?                @db.Timestamp(6)
  to_date                DateTime?                @db.Timestamp(6)
  feature_count          Int?
  flag_count             Int?
  language_id            BigInt
  external_url           String?                  @db.VarChar(255)
  visit_count            Int                      @default(0)
  rating                 Int                      @default(0)
  is_deleted             Boolean                  @default(false)
  data_table_id          BigInt?
  address                String?
  author                 String?
  book_title             String?
  chapter                String?
  edition                String?
  editor                 String?
  extra                  String?
  file                   String?
  how_published          String?                  @db.VarChar(255)
  institution            String?                  @db.VarChar(255)
  isbn                   String?                  @db.VarChar(255)
  item_type              String?                  @db.VarChar(255)
  journal                String?
  language               String?                  @db.VarChar(255)
  month                  String?                  @db.VarChar(255)
  note                   String?
  number                 String?                  @db.VarChar(255)
  organization           String?
  pages                  String?                  @db.VarChar(255)
  publisher              String?
  school                 String?                  @db.VarChar(255)
  series                 String?
  url                    String?
  volume                 String?                  @db.VarChar(255)
  year                   String?                  @db.VarChar(255)
  coverage_id            BigInt?
  latitude               Float?
  location_accuracy      String?                  @db.VarChar(255)
  longitude              Float?
  place_name             String?                  @db.VarChar(255)
  reverse_geocoded_name  String?                  @db.VarChar(255)
  topology               Unsupported("geometry")?
  document_habitat       document_habitat[]       @ignore
  document_species_group document_species_group[] @ignore
}

model document_coverage {
  id           BigInt                  @id
  document_id  BigInt?
  geoentity_id BigInt?
  placename    String?                 @db.VarChar(255)
  topology     Unsupported("geometry")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model document_habitat {
  document_habitats_id BigInt?
  habitat_id           BigInt?
  habitat              habitat?  @relation(fields: [habitat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk4e67cd8333ba4988")
  document             document? @relation(fields: [document_habitats_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk4e67cd83ff170ae4")

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model document_species_group {
  document_species_groups_id BigInt?
  species_group_id           BigInt?
  document                   document?      @relation(fields: [document_species_groups_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk8014d5984280079")
  species_group              species_group? @relation(fields: [species_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk8014d598500b4369")

  @@ignore
}

model download_log {
  id                 BigInt   @id
  version            BigInt
  author_id          BigInt
  created_on         DateTime @db.Timestamp(6)
  file_path          String?  @db.VarChar(255)
  filter_url         String   @db.VarChar
  notes              String?
  params_map_as_text String?
  status             String   @db.VarChar(255)
  type               String   @db.VarChar(255)
  source_type        String?  @db.VarChar(255)
  offset_param       BigInt
  suser              suser    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk4220170dd7a6cb39")
}

model external_links {
  id                  BigInt                @id
  col_id              String?               @db.VarChar(255)
  eol_fetch_date      DateTime?             @db.Timestamp(6)
  eol_id              String?               @db.VarChar(255)
  gbif_id             String?               @db.VarChar(255)
  itis_id             String?               @db.VarChar(255)
  iucn_id             String?               @db.VarChar(255)
  ncbi_id             String?               @db.VarChar(255)
  no_of_data_objects  Int?
  frlht_url           String?               @db.VarChar
  fishbase_url        String?               @db.VarChar(255)
  taxonomy_definition taxonomy_definition[]
}

model fact {
  id                BigInt    @id
  attribution       String
  contributor_id    BigInt
  is_deleted        Boolean
  license_id        BigInt
  object_id         BigInt
  page_taxon_id     BigInt?
  trait_instance_id BigInt
  trait_value_id    BigInt?
  value             String?   @db.VarChar(255)
  object_type       String    @db.VarChar(255)
  to_value          String?   @db.VarChar(255)
  from_date         DateTime? @db.Timestamp(6)
  to_date           DateTime? @db.Timestamp(6)

  @@unique([object_id, page_taxon_id, trait_instance_id, trait_value_id], map: "fact_object_id_page_taxon_id_trait_id_trait_value_id_key")
  @@unique([trait_value_id, object_id, object_type, trait_instance_id], map: "unique_trait_instance_id")
  @@index([trait_value_id, object_id, object_type, trait_instance_id], map: "fact_trait_value_id_object_id_object_type_trait_id_key")
}

model featured {
  id            BigInt   @id
  author_id     BigInt
  created_on    DateTime @db.Timestamp(6)
  notes         String   @db.VarChar(400)
  object_id     BigInt
  object_type   String   @db.VarChar(255)
  user_group_id BigInt?
  language_id   BigInt

  @@unique([user_group_id, object_type, object_id, author_id], map: "featured_user_group_id_key")
  @@unique([user_group_id, object_type, object_id, author_id], map: "unique_author_id")
}

model field {
  id             BigInt  @id
  category       String? @db.VarChar(255)
  concept        String? @db.VarChar(255)
  connection     BigInt?
  description    String?
  display_order  Int?
  language_id    BigInt?
  sub_category   String? @db.VarChar(255)
  url_identifier String? @db.VarChar(255)
}

model field_content {
  id          BigInt   @id
  content     String?
  field_id    BigInt?
  is_deleted  Boolean?
  language_id BigInt?
}

model field_header {
  id             BigInt  @id
  description    String?
  field_id       BigInt?
  header         String? @db.VarChar(255)
  language_id    BigInt?
  url_identifier String? @db.VarChar(255)
}

model field_new {
  id            BigInt                @id
  display_order BigInt?
  header        String?               @db.VarChar(255)
  label         String?               @db.VarChar(255)
  parent_id     BigInt?
  path          Unsupported("ltree")?
}

model field_template {
  id          BigInt    @id
  created_on  DateTime? @db.Timestamp(6)
  field_index BigInt
  is_deleted  Boolean?
  modified_on DateTime? @db.Timestamp(6)
  parent_id   BigInt
}

model file_download_credentials {
  id             Int              @id @default(autoincrement())
  access_key     String           @db.VarChar(255)
  is_deleted     Boolean
  name           String           @db.VarChar(255)
  file_downloads file_downloads[]
}

model file_downloads {
  id                        Int                       @id @default(autoincrement())
  date                      DateTime                  @db.Timestamp(6)
  file_name                 String                    @db.VarChar(255)
  user_id                   Int
  file_download_credentials file_download_credentials @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkpumnqroc2jntuxed6vstyh990")
}

model firebase_tokens {
  id      BigInt  @id
  token   String? @db.VarChar(255)
  user_id BigInt?
  suser   suser?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkrnu6jh1q2jtanlp44d0nnd7st")
}

model flag {
  id          BigInt   @id(map: "observation_flag_pkey")
  author_id   BigInt
  created_on  DateTime @db.Timestamp(6)
  flag        String   @db.VarChar(255)
  notes       String?
  object_id   BigInt
  object_type String   @db.VarChar(255)

  @@unique([author_id, object_id, object_type], map: "flag_author_type_id")
}

model follow {
  id          BigInt    @id
  object_id   BigInt
  object_type String    @db.VarChar(255)
  author_id   BigInt
  created_on  DateTime? @db.Timestamp(6)

  @@unique([author_id, object_id, object_type], map: "follow_user_id_key")
  @@unique([author_id, object_id, object_type], map: "unique_object_type")
}

model gallery_slider {
  id             BigInt   @id
  author_id      BigInt?
  custom_desc    String?
  file_name      String?  @db.VarChar(255)
  more_links     String?  @db.VarChar(255)
  observation_id BigInt?
  title          String?  @db.VarChar(255)
  ug_id          BigInt?
  display_order  BigInt?
  is_truncated   Boolean? @default(true)
}

model geoentities {
  id        BigInt                  @id
  placename String?                 @db.VarChar(255)
  topology  Unsupported("geometry")
}

model group_gallery_slider {
  id             BigInt  @id
  author_id      BigInt?
  custom_desc    String?
  display_order  BigInt
  file_name      String? @db.VarChar(255)
  more_links     String? @db.VarChar(255)
  observation_id BigInt?
  title          String? @db.VarChar(255)
  ug_id          BigInt?
}

model habitat {
  id               BigInt             @id
  habitat_order    Int
  name             String             @unique @db.VarChar(255)
  document_habitat document_habitat[] @ignore
  suser_habitat    suser_habitat[]    @ignore
}

model landscape {
  id             BigInt   @id
  geo_entity_id  BigInt?
  is_deleted     Boolean?
  short_name     String?  @db.VarChar(255)
  site_number    BigInt?
  thumbnail_path String?  @db.VarChar(255)
}

model language {
  id                                         BigInt           @id
  name                                       String           @db.VarChar(255)
  three_letter_code                          String           @unique @db.VarChar(255)
  two_letter_code                            String?          @db.VarChar(255)
  is_dirty                                   Boolean?
  region                                     String?          @db.VarChar(255)
  classification                             classification[]
  common_names                               common_names[]
  data_table                                 data_table[]
  dataset_dataset_data_language_idTolanguage dataset[]        @relation("dataset_data_language_idTolanguage")
  dataset_dataset_language_idTolanguage      dataset[]        @relation("dataset_language_idTolanguage")
  dataset1                                   dataset1[]
  discussion                                 discussion[]
  newsletter                                 newsletter[]
}

model license {
  id      BigInt    @id
  name    String    @db.VarChar(255)
  url     String?   @db.VarChar(255)
  dataset dataset[]
}

model newsletter {
  id             BigInt      @id
  version        BigInt
  date           DateTime    @db.Timestamp(6)
  newsitem       String
  title          String      @db.VarChar(255)
  sticky         Boolean?
  user_group_id  BigInt?
  display_order  Int?
  language_id    BigInt
  parent_id      BigInt
  show_in_footer Boolean
  user_group     user_group? @relation(fields: [user_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk41b804b9159e68fb")
  language       language    @relation(fields: [language_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk41b804b9a2a94b4c")
}

model observation {
  id                    BigInt                  @id
  author_id             BigInt
  created_on            DateTime                @db.Timestamp(6)
  group_id              BigInt
  latitude              Float
  longitude             Float
  notes                 String?
  from_date             DateTime?               @db.Timestamp(6)
  place_name            String?
  rating                Int
  reverse_geocoded_name String?
  flag_count            Int?
  geo_privacy           Boolean?
  is_deleted            Boolean?
  last_revised          DateTime?               @db.Timestamp(6)
  location_accuracy     String?                 @db.VarChar(255)
  visit_count           BigInt?
  max_voted_reco_id     BigInt?
  agree_terms           Boolean?
  is_checklist          Boolean
  is_showable           Boolean
  source_id             BigInt?
  to_date               DateTime?               @db.Timestamp(6)
  topology              Unsupported("geometry")
  checklist_annotations String?
  feature_count         Int?
  is_locked             Boolean?
  license_id            BigInt
  language_id           BigInt
  location_scale        String                  @db.VarChar(255)
  dataset_id            BigInt?
  repr_image_id         BigInt?
  protocol              String                  @db.VarChar(255)
  basis_of_record       String                  @db.VarChar(255)
  no_of_images          Int                     @default(0)
  no_of_videos          Int                     @default(0)
  no_of_audio           Int                     @default(0)
  no_of_identifications Int                     @default(0)
  data_table_id         BigInt?
  date_accuracy         String?                 @db.VarChar(100)
  is_verified           Boolean?                @default(false)

  @@index([dataset_id])
  @@index([group_id])
  @@index([is_checklist, is_deleted, is_showable], map: "observation_ischecklist_isdeleted_isshowable_idx")
  @@index([last_revised(sort: Desc), id])
  @@index([max_voted_reco_id])
  @@index([topology], map: "observation_topology_gist", type: Gist)
}

model observation_custom_field {
  id                    BigInt    @id
  author_id             BigInt?
  created_on            DateTime? @db.Timestamp(6)
  custom_field_id       BigInt?
  custom_field_value_id BigInt?
  last_modified         DateTime? @db.Timestamp(6)
  observation_id        BigInt?
  user_group_id         BigInt?
  value_date            DateTime? @db.Timestamp(6)
  value_numeric         Float?
  value_string          String?
}

model observation_resource {
  resource_id    BigInt
  observation_id BigInt

  @@id([observation_id, resource_id])
}

model observationesdocument {
  observation_id          BigInt    @id
  all_reco_vote           Json?     @db.Json
  author_id               BigInt?
  created_by              String?   @db.VarChar(255)
  created_on              DateTime? @db.Timestamp(6)
  custom_fields           Json?     @db.Json
  data_table_id           BigInt?
  dataset_id              BigInt?
  dataset_title           String?   @db.VarChar(255)
  date_accuracy           String?   @db.VarChar(255)
  facts                   Json?     @db.Json
  featured                Json?     @db.Json
  flag_count              BigInt?
  flags                   Json?     @db.Json
  from_date               DateTime? @db.Timestamp(6)
  geo_privacy             Boolean?
  group_id                BigInt?
  group_name              String?   @db.VarChar(255)
  is_checklist            Boolean?
  is_locked               Boolean?
  language_id             Int?
  last_revised            DateTime? @db.Timestamp(6)
  location                Json?     @db.Json
  location_information    Json?     @db.Json
  location_scale          String?   @db.VarChar(255)
  max_voted_reco          Json?     @db.Json
  no_media                Int?
  no_of_audio             Int?
  no_of_identifications   Int?
  no_of_images            Int?
  no_of_videos            Int?
  notes                   String?   @db.VarChar(255)
  observation_resource    Json?     @db.Json
  observed_in_month       String?   @db.VarChar(255)
  place_name              String?   @db.VarChar(255)
  profile_pic             String?   @db.VarChar(255)
  protocol                String?   @db.VarChar(255)
  repr_image_id           BigInt?
  repr_image_url          String?   @db.VarChar(255)
  reverse_geocoded_name   String?   @db.VarChar(255)
  sgroup_filter           String?   @db.VarChar(255)
  tags                    Json?     @db.Json
  to_date                 DateTime? @db.Timestamp(6)
  user_group_observations Json?     @db.Json
  visit_count             BigInt?
  is_publication_grade    Boolean?
  reco_vote_count         Int?
  data_table_title        String?   @db.VarChar(255)
  basis_of_data           String?   @db.VarChar(255)
  basis_of_record         String?   @db.VarChar(255)
  checklist_annotation    String?   @db.VarChar(255)
  checklist_annotations   String?   @db.VarChar(255)
}

model page {
  id             BigInt   @id
  auther_id      BigInt?
  auther_name    String?  @db.VarChar(255)
  content        String
  date           DateTime @db.Timestamp(6)
  description    String?
  is_deleted     Boolean? @default(false)
  language_id    BigInt
  pageindex      Int
  pagetype       Int
  parent_id      BigInt
  show_in_footer Boolean
  sticky         Boolean
  title          String
  url            String?  @db.VarChar(255)
  user_group_id  BigInt?
  social_preview String?
}

model page_field {
  id                BigInt    @id
  author_id         BigInt?
  created_on        DateTime? @db.Timestamp(6)
  is_deleted        Boolean?
  modified_on       DateTime? @db.Timestamp(6)
  protected_area_id BigInt?
  template_id       BigInt?
}

model page_gallery_slider {
  id            BigInt  @id
  author_id     BigInt?
  display_order BigInt
  file_name     String  @db.VarChar(255)
  page_id       BigInt?
  attribution   String? @db.VarChar(255)
  caption       String? @db.VarChar(255)
  license_id    BigInt?
}

model rating {
  id    BigInt  @id
  stars BigInt?
}

model rating_link {
  id         BigInt  @id
  rating_id  BigInt?
  rating_ref BigInt?
  type       String? @db.VarChar(255)
}

model recommendation {
  id                 BigInt   @id
  last_modified      DateTime @db.Timestamp(6)
  name               String
  taxon_concept_id   BigInt?
  is_scientific_name Boolean?
  language_id        BigInt?
  lowercase_name     String?  @db.VarChar(255)
  flagging_reason    String?  @db.VarChar(1500)
  is_flagged         Boolean?
  accepted_name_id   BigInt?
  canonical_name     String?  @db.VarChar(255)

  @@unique([taxon_concept_id, accepted_name_id, name, language_id], map: "recommendation_taxon_concept_id_key")
  @@index([lowercase_name], map: "recommendation_lowercase_name")
  @@index([name(ops: raw("gist_trgm_ops"))], type: Gist)
  @@index([taxon_concept_id])
  @@index([taxon_concept_id], map: "recommendation_taxon_concept_id_idx1")
}

model recommendation_vote {
  id                  BigInt   @id
  author_id           BigInt
  observation_id      BigInt
  recommendation_id   BigInt
  voted_on            DateTime @db.Timestamp(6)
  common_name_reco_id BigInt?
  given_common_name   String?
  given_sci_name      String?
  flag                Boolean?
  source              String?

  @@unique([author_id, observation_id], map: "recommendation_vote_author_id_key")
}

model reference {
  id               BigInt  @id
  species_field_id BigInt
  title            String?
  url              String?
}

model resource {
  id                 BigInt              @id
  description        String?
  file_name          String              @db.VarChar(255)
  mime_type          String?             @db.VarChar(255)
  type               String              @db.VarChar(255)
  url                String?             @db.VarChar(255)
  rating             Int?
  upload_time        DateTime?           @db.Timestamp(6)
  uploader_id        BigInt?
  context            String?             @db.VarChar(255)
  language_id        BigInt
  license_id         BigInt
  contributor        String?
  access_rights      String?             @db.VarChar(255)
  annotations        String?             @db.VarChar(255)
  gbifid             BigInt?
  version            BigInt?
  resource_crop_info resource_crop_info?
}

model resource_contributor {
  resource_attributors_id  BigInt  @id
  contributor_id           BigInt?
  resource_contributors_id BigInt?
}

model resource_crop_info {
  id               BigInt   @id(map: "extended_resource_data_pkey")
  x                BigInt?
  y                BigInt?
  width            BigInt?
  height           BigInt?
  selection_status String?  @db.VarChar
  resource         resource @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id         BigInt       @id
  authority  String       @unique @db.VarChar(255)
  suser_role suser_role[]
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model species {
  id                  BigInt                @id
  taxon_concept_id    BigInt
  title               String                @db.VarChar(255)
  created_on          DateTime?             @db.Timestamp(6)
  updated_on          DateTime?             @db.Timestamp(6)
  date_created        DateTime?             @db.Timestamp(6)
  last_updated        DateTime?             @db.Timestamp(6)
  feature_count       Int?
  habitat_id          BigInt?
  has_media           Boolean?
  repr_image_id       BigInt?
  is_deleted          Boolean               @default(false)
  data_table_id       BigInt?
  species_data_table  species_data_table[]  @ignore
  taxonomy_definition taxonomy_definition[]

  @@index([is_deleted])
}

model species_bulk_upload {
  id              BigInt    @id
  version         BigInt
  author_id       BigInt
  end_date        DateTime? @db.Timestamp(6)
  file_path       String?   @db.VarChar(255)
  notes           String?
  start_date      DateTime  @db.Timestamp(6)
  status          String    @db.VarChar(255)
  error_file_path String?   @db.VarChar(255)
  images_dir      String?   @db.VarChar(255)
  species_created Int?
  species_updated Int?
  stubs_created   Int?
  upload_type     String?   @db.VarChar(255)
  log_file_path   String?   @db.VarChar(255)
  suser           suser     @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk759f674bd7a6cb39")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model species_data_table {
  species_data_tables_id BigInt?
  data_table_id          BigInt?
  species                species?    @relation(fields: [species_data_tables_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5dohryes6w8xcmtyffg2stx2f")
  data_table             data_table? @relation(fields: [data_table_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_udvmhk40d35wajfle1e38t4b")

  @@ignore
}

model species_field {
  id            BigInt    @id
  description   String
  field_id      BigInt
  species_id    BigInt
  status        String    @db.VarChar(255)
  class         String    @db.VarChar(255)
  date_created  DateTime? @db.Timestamp(6)
  last_updated  DateTime? @db.Timestamp(6)
  upload_time   DateTime? @db.Timestamp(6)
  uploader_id   BigInt?
  language_id   BigInt
  data_table_id BigInt?
  is_deleted    Boolean?  @default(false)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model species_field_audience_types {
  species_field_id            BigInt?
  species_field_audience_type String? @map("species_field$audience_type") @db.VarChar(255)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model species_field_contributor {
  species_field_attributors_id BigInt?
  contributor_id               BigInt?
  attributors_idx              Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model species_field_license {
  species_field_licenses_id BigInt?
  license_id                BigInt?

  @@ignore
}

model species_field_resources {
  species_field_id BigInt
  resource_id      BigInt

  @@id([species_field_id, resource_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model species_field_suser {
  species_field_contributors_id BigInt?
  suser_id                      BigInt?
  contributors_idx              Int?

  @@ignore
}

model species_group {
  id                     BigInt                   @id
  name                   String                   @unique @db.VarChar(255)
  parent_group_id        BigInt?
  group_order            Int?
  document_species_group document_species_group[] @ignore
  species_group          species_group?           @relation("species_groupTospecies_group", fields: [parent_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkf087bdbc7f47f7bb")
  other_species_group    species_group[]          @relation("species_groupTospecies_group")
  species_group_mapping  species_group_mapping[]
  suser_species_group    suser_species_group[]    @ignore
  taxonomy_definition    taxonomy_definition[]
}

model species_group_mapping {
  id                  BigInt               @id
  rank                Int
  species_group_id    BigInt
  taxon_concept_id    BigInt?
  taxon_name          String               @db.VarChar(255)
  species_group       species_group        @relation(fields: [species_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fka038014b500b4369")
  taxonomy_definition taxonomy_definition? @relation(fields: [taxon_concept_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fka038014bb3cf407d")

  @@unique([rank, taxon_name], map: "species_group_mapping_rank_key")
  @@unique([rank, taxon_name], map: "unique_taxon_name")
}

model species_permission {
  id                  BigInt              @id
  version             BigInt
  author_id           BigInt
  created_on          DateTime            @db.Timestamp(6)
  taxon_concept_id    BigInt
  permission_type     BigInt
  taxonomy_definition taxonomy_definition @relation(fields: [taxon_concept_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkaabafcb2b3cf407d")
  suser               suser               @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkaabafcb2d7a6cb39")
}

model species_permission_request {
  id       BigInt  @id
  role     String? @db.VarChar(255)
  taxon_id BigInt?
  user_id  BigInt?
}

model species_resource {
  species_resources_id BigInt
  resource_id          BigInt

  @@id([species_resources_id, resource_id])
}

model suser {
  id                                          BigInt                                        @id
  account_expired                             Boolean
  account_locked                              Boolean
  enabled                                     Boolean
  password                                    String                                        @db.VarChar(255)
  password_expired                            Boolean
  username                                    String                                        @db.VarChar(255)
  about_me                                    String?
  date_created                                DateTime?                                     @db.Timestamp(6)
  email                                       String?                                       @unique @db.VarChar(255)
  hide_email_id                               Boolean?
  last_login_date                             DateTime?                                     @db.Timestamp(6)
  location                                    String?                                       @db.VarChar(255)
  name                                        String?                                       @db.VarChar(255)
  profile_pic                                 String?                                       @db.VarChar(255)
  send_notification                           Boolean?
  timezone                                    Float?                                        @db.Real
  website                                     String?                                       @db.VarChar(255)
  allow_identifaction_mail                    Boolean?
  icon                                        String?                                       @db.VarChar(255)
  language_id                                 BigInt
  institution_type                            String?                                       @db.VarChar(255)
  occupation_type                             String?                                       @db.VarChar(255)
  sex_type                                    String?                                       @db.VarChar(255)
  latitude                                    Float?
  longitude                                   Float?
  email_validation                            Boolean?
  mobile_number                               String?                                       @db.VarChar(255)
  mobile_validation                           Boolean?
  send_push_notification                      Boolean?                                      @default(false)
  is_deleted                                  Boolean?                                      @default(false)
  common_names                                common_names[]
  data_package                                data_package[]
  data_table                                  data_table[]
  dataset                                     dataset[]
  dataset1                                    dataset1[]
  discussion                                  discussion[]
  download_log                                download_log[]
  firebase_tokens                             firebase_tokens[]
  species_bulk_upload                         species_bulk_upload[]
  species_permission                          species_permission[]
  suser_habitat                               suser_habitat[]                               @ignore
  suser_role                                  suser_role[]
  suser_species_group                         suser_species_group[]                         @ignore
  synonyms                                    synonyms[]
  synonyms_suser                              synonyms_suser[]                              @ignore
  taxonomy_definition                         taxonomy_definition[]
  taxonomy_definition_suser                   taxonomy_definition_suser[]                   @ignore
  taxonomy_registry_backup_without_correction taxonomy_registry_backup_without_correction[]
  taxonomy_registry_suser                     taxonomy_registry_suser[]                     @ignore
  upload_log                                  upload_log[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model suser_habitat {
  suser_habitats_id BigInt?
  habitat_id        BigInt?
  habitat           habitat? @relation(fields: [habitat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fka870242633ba4988")
  suser             suser?   @relation(fields: [suser_habitats_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fka87024266dbe4477")

  @@ignore
}

model SuserOdkMapping {
  id          Int     @id @default(autoincrement())
  s_user_id   BigInt
  app_user_id BigInt?
  project_id  BigInt?
  web_user_id BigInt?

  @@map("suser_odk_mapping")
}

model suser_role {
  role_id   BigInt
  s_user_id BigInt
  role      role   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk7wmffpkjywyqxt0g3c9fhwpgp")
  suser     suser  @relation(fields: [s_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkeyo72av5xp29aj6mjrpoqpsnx")

  @@id([role_id, s_user_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model suser_species_group {
  suser_species_groups_id BigInt?
  species_group_id        BigInt?
  species_group           species_group? @relation(fields: [species_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk3a9c65fb500b4369")
  suser                   suser?         @relation(fields: [suser_species_groups_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk3a9c65fba99b93cc")

  @@ignore
}

model suser_verification {
  id                BigInt    @id
  action            String?   @db.VarChar(255)
  creation_date     DateTime? @db.Timestamp(6)
  no_of_attempts    Int?      @default(0)
  otp               String?   @db.VarChar(255)
  timeout           BigInt?
  user_id           BigInt?
  verification_id   String?   @db.VarChar(255)
  verification_type String?   @db.VarChar(255)
}

model synonyms {
  id                   BigInt              @id
  name                 String              @db.VarChar(255)
  relationship         String?             @db.VarChar(255)
  taxon_concept_id     BigInt
  binomial_form        String?             @db.VarChar(255)
  canonical_form       String?             @db.VarChar(255)
  italicised_form      String?             @db.VarChar(255)
  normalized_form      String?             @db.VarChar(255)
  upload_time          DateTime?           @db.Timestamp(6)
  uploader_id          BigInt?
  status               String?             @db.VarChar(255)
  position             String?             @db.VarChar(255)
  author_year          String?             @db.VarChar(255)
  match_database_name  String?             @db.VarChar(255)
  match_id             String?             @db.VarChar(255)
  ibp_source           String?             @db.VarChar(255)
  via_datasource       String?             @db.VarChar(255)
  drop_reason          String?             @db.VarChar(255)
  activity_description String?             @db.VarChar(255)
  name_source_id       String?             @db.VarChar(255)
  taxonomy_definition  taxonomy_definition @relation(fields: [taxon_concept_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6cfe43d8b3cf407d")
  suser                suser?              @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6cfe43d8bf80ff76")
  synonyms_suser       synonyms_suser[]    @ignore

  @@unique([canonical_form, taxon_concept_id, relationship], map: "synonyms_canonical_form_key")
  @@unique([taxon_concept_id, relationship, canonical_form], map: "unique_canonical_form")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model synonyms_suser {
  synonyms_contributors_id BigInt?
  suser_id                 BigInt?
  contributors_idx         Int?
  synonyms_curators_id     BigInt?
  curators_idx             Int?
  suser                    suser?    @relation(fields: [suser_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkc2e9df9721150126")
  synonyms                 synonyms? @relation(fields: [synonyms_contributors_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fkc2e9df97c09419c5")

  @@ignore
}

model tag_links {
  id      BigInt @id
  tag_id  BigInt
  tag_ref BigInt
  type    String @db.VarChar(255)

  @@index([tag_id, type])
}

model tags {
  id   BigInt @id
  name String @unique @db.VarChar(255)
}

model taxonomic_coverage {
  id              BigInt @id
  version         BigInt
  rank            String @db.VarChar(255)
  scientific_name String @db.VarChar(255)
}

model taxonomic_coverages {
  id                         BigInt @id
  version                    BigInt
  general_taxonomic_coverage String @db.VarChar(255)
}

model taxonomy_definition {
  id                                                                                                                                      BigInt                                        @id
  binomial_form                                                                                                                           String?                                       @db.VarChar(255)
  canonical_form                                                                                                                          String                                        @db.VarChar(255)
  external_links_id                                                                                                                       BigInt?
  group_id                                                                                                                                BigInt?
  italicised_form                                                                                                                         String?                                       @db.VarChar(255)
  name                                                                                                                                    String                                        @db.VarChar(255)
  normalized_form                                                                                                                         String?                                       @db.VarChar(255)
  rank                                                                                                                                    String                                        @db.VarChar
  threatened_status                                                                                                                       String?                                       @db.VarChar(255)
  upload_time                                                                                                                             DateTime?                                     @db.Timestamp(6)
  uploader_id                                                                                                                             BigInt?
  status                                                                                                                                  String?                                       @db.VarChar(255)
  position                                                                                                                                String?                                       @db.VarChar(255)
  author_year                                                                                                                             String?                                       @db.VarChar(255)
  match_database_name                                                                                                                     String?
  match_id                                                                                                                                String?                                       @db.VarChar(255)
  ibp_source                                                                                                                              String?                                       @db.VarChar(255)
  via_datasource                                                                                                                          String?
  is_flagged                                                                                                                              Boolean?
  lowercase_match_name                                                                                                                    String?                                       @db.VarChar(255)
  col_name_status                                                                                                                         String?                                       @db.VarChar(255)
  old_id                                                                                                                                  String?                                       @db.VarChar(255)
  relationship                                                                                                                            String?                                       @db.VarChar(255)
  class                                                                                                                                   String                                        @db.VarChar(255)
  flagging_reason                                                                                                                         String?                                       @db.VarChar(1500)
  no_ofcolmatches                                                                                                                         Int?
  is_deleted                                                                                                                              Boolean?
  dirty_list_reason                                                                                                                       String?                                       @db.VarChar(1000)
  activity_description                                                                                                                    String?                                       @db.VarChar(2000)
  default_hierarchy                                                                                                                       String?
  species_id                                                                                                                              BigInt?
  name_source_id                                                                                                                          String?                                       @db.VarChar(255)
  traits                                                                                                                                  BigInt[]
  traits_json                                                                                                                             Json?                                         @db.Json
  accepted_synonym_accepted_synonym_accepted_idTotaxonomy_definition                                                                      accepted_synonym[]                            @relation("accepted_synonym_accepted_idTotaxonomy_definition")
  accepted_synonym_accepted_synonym_synonym_idTotaxonomy_definition                                                                       accepted_synonym[]                            @relation("accepted_synonym_synonym_idTotaxonomy_definition")
  common_names                                                                                                                            common_names[]
  species_group_mapping                                                                                                                   species_group_mapping[]
  species_permission                                                                                                                      species_permission[]
  synonyms                                                                                                                                synonyms[]
  species_group                                                                                                                           species_group?                                @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkaf4cb01a9dfafc6")
  suser                                                                                                                                   suser?                                        @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkaf4cb01bf80ff76")
  external_links                                                                                                                          external_links?                               @relation(fields: [external_links_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkaf4cb01c6232b1")
  species                                                                                                                                 species?                                      @relation(fields: [species_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  taxonomy_definition_author                                                                                                              taxonomy_definition_author[]                  @ignore
  taxonomy_definition_suser                                                                                                               taxonomy_definition_suser[]                   @ignore
  taxonomy_definition_year                                                                                                                taxonomy_definition_year[]                    @ignore
  taxonomy_registry_backup_without_correction_taxonomy_registry_backup_without_correction_taxon_definition_idTotaxonomy_definition        taxonomy_registry_backup_without_correction[] @relation("taxonomy_registry_backup_without_correction_taxon_definition_idTotaxonomy_definition")
  taxonomy_registry_backup_without_correction_taxonomy_registry_backup_without_correction_parent_taxon_definition_idTotaxonomy_definition taxonomy_registry_backup_without_correction[] @relation("taxonomy_registry_backup_without_correction_parent_taxon_definition_idTotaxonomy_definition")

  @@index([canonical_form, rank, is_deleted], map: "idx_canonical_form")
  @@index([match_id], map: "match_id_idx")
  @@index([normalized_form], map: "normalized_form_idx")
  @@index([position], map: "position_idx")
  @@index([rank], map: "rank_idx")
  @@index([status], map: "status_idx")
  @@index([canonical_form(ops: raw("gist_trgm_ops"))], type: Gist)
  @@index([lowercase_match_name], map: "taxonomy_definition_lowercase_match_name")
  @@index([traits], map: "taxonomy_definition_traits", type: Gin)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model taxonomy_definition_author {
  taxonomy_definition_id BigInt?
  author_string          String?              @db.VarChar(255)
  taxonomy_definition    taxonomy_definition? @relation(fields: [taxonomy_definition_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkbe9f20897d7f8af")

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model taxonomy_definition_backup {
  id                   BigInt?
  binomial_form        String?   @db.VarChar(255)
  canonical_form       String?   @db.VarChar(255)
  external_links_id    BigInt?
  group_id             BigInt?
  italicised_form      String?   @db.VarChar(255)
  name                 String?   @db.VarChar(255)
  normalized_form      String?   @db.VarChar(255)
  rank                 Int?
  threatened_status    String?   @db.VarChar(255)
  upload_time          DateTime? @db.Timestamp(6)
  uploader_id          BigInt?
  status               String?   @db.VarChar(255)
  position             String?   @db.VarChar(255)
  author_year          String?   @db.VarChar(255)
  match_database_name  String?
  match_id             String?   @db.VarChar(255)
  ibp_source           String?   @db.VarChar(255)
  via_datasource       String?
  is_flagged           Boolean?
  lowercase_match_name String?   @db.VarChar(255)
  col_name_status      String?   @db.VarChar(255)
  old_id               String?   @db.VarChar(255)
  relationship         String?   @db.VarChar(255)
  class                String?   @db.VarChar(255)
  flagging_reason      String?   @db.VarChar(1500)
  no_ofcolmatches      Int?
  is_deleted           Boolean?
  dirty_list_reason    String?   @db.VarChar(1000)
  activity_description String?   @db.VarChar(2000)
  default_hierarchy    String?
  species_id           BigInt?
  name_source_id       String?   @db.VarChar(255)
  traits               BigInt[]
  traits_json          Json?     @db.Json

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model taxonomy_definition_suser {
  taxonomy_definition_contributors_id BigInt?
  suser_id                            BigInt?
  contributors_idx                    Int?
  taxonomy_definition_curators_id     BigInt?
  curators_idx                        Int?
  suser                               suser?               @relation(fields: [suser_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk727ea40021150126")
  taxonomy_definition                 taxonomy_definition? @relation(fields: [taxonomy_definition_contributors_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk727ea40086e8f01a")

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model taxonomy_definition_year {
  taxonomy_definition_id BigInt?
  year_string            String?              @db.VarChar(255)
  taxonomy_definition    taxonomy_definition? @relation(fields: [taxonomy_definition_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk1c7a2ebb7d7f8af")

  @@ignore
}

model taxonomy_rank {
  id         BigInt   @id
  isdeleted  Boolean?
  isrequired Boolean?
  name       String?  @db.VarChar(255)
  rankvalue  Float?
}

model taxonomy_registry {
  id                  BigInt                @id(map: "taxonomy_registry_pkey1")
  classification_id   BigInt?
  path                Unsupported("ltree")?
  rank                String                @db.VarChar(255)
  taxon_definition_id BigInt?
  upload_time         DateTime?             @db.Timestamp(6)
  uploader_id         BigInt?

  @@index([path], map: "idx_path", type: Gist)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model taxonomy_registry_backup {
  id                         BigInt?
  version                    BigInt?
  classification_id          BigInt?
  parent_taxon_id            BigInt?
  taxon_definition_id        BigInt?
  upload_time                DateTime?             @db.Timestamp(6)
  uploader_id                BigInt?
  parent_taxon_definition_id BigInt?
  rank                       String                @db.VarChar(255)
  path                       Unsupported("ltree")?

  @@ignore
}

model taxonomy_registry_backup_without_correction {
  id                                                                                                              BigInt                                        @id(map: "taxonomy_registry_pkey")
  version                                                                                                         BigInt
  classification_id                                                                                               BigInt
  parent_taxon_id                                                                                                 BigInt?
  path                                                                                                            String                                        @db.VarChar(255)
  taxon_definition_id                                                                                             BigInt
  upload_time                                                                                                     DateTime?                                     @db.Timestamp(6)
  uploader_id                                                                                                     BigInt?
  parent_taxon_definition_id                                                                                      BigInt?
  taxonomy_registry_backup_without_correction                                                                     taxonomy_registry_backup_without_correction?  @relation("taxonomy_registry_backup_without_correctionTotaxonomy_registry_backup_without_correction", fields: [parent_taxon_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk9ded596b7e532be5")
  other_taxonomy_registry_backup_without_correction                                                               taxonomy_registry_backup_without_correction[] @relation("taxonomy_registry_backup_without_correctionTotaxonomy_registry_backup_without_correction")
  taxonomy_definition_taxonomy_registry_backup_without_correction_taxon_definition_idTotaxonomy_definition        taxonomy_definition                           @relation("taxonomy_registry_backup_without_correction_taxon_definition_idTotaxonomy_definition", fields: [taxon_definition_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk9ded596b7f084c68")
  classification                                                                                                  classification                                @relation(fields: [classification_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk9ded596bb929a30c")
  suser                                                                                                           suser?                                        @relation(fields: [uploader_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk9ded596bbf80ff76")
  taxonomy_definition_taxonomy_registry_backup_without_correction_parent_taxon_definition_idTotaxonomy_definition taxonomy_definition?                          @relation("taxonomy_registry_backup_without_correction_parent_taxon_definition_idTotaxonomy_definition", fields: [parent_taxon_definition_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "td_fk")
  taxonomy_registry_suser                                                                                         taxonomy_registry_suser[]                     @ignore

  @@unique([path, classification_id, taxon_definition_id], map: "taxonomy_registry_path_key")
  @@unique([path, classification_id, taxon_definition_id], map: "unique_taxon_definition_id")
  @@index([path(ops: raw("gin_trgm_ops"))], map: "taxon_registry_path_idx", type: Gin)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model taxonomy_registry_suser {
  taxonomy_registry_contributors_id           BigInt?
  suser_id                                    BigInt?
  contributors_idx                            Int?
  suser                                       suser?                                       @relation(fields: [suser_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk87a93aea21150126")
  taxonomy_registry_backup_without_correction taxonomy_registry_backup_without_correction? @relation(fields: [taxonomy_registry_contributors_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk87a93aea76e99a2e")

  @@ignore
}

model taxonomyesdocument {
  id              BigInt   @id
  accepted_ids    BigInt[]
  accepted_names  String[]
  canonical_form  String?  @db.VarChar(255)
  common_names    Json?    @db.Json
  group_id        BigInt?
  group_name      String?  @db.VarChar(255)
  hierarchy       Json?    @db.Json
  italicised_form String?  @db.VarChar(255)
  name            String?  @db.VarChar(255)
  path            String?  @db.VarChar(255)
  position        String?  @db.VarChar(255)
  rank            String?  @db.VarChar(255)
  status          String?  @db.VarChar(255)
}

model template_header {
  id          BigInt   @id
  header      String?
  is_deleted  Boolean?
  language_id BigInt?
  template_id BigInt?
}

model text_curation_sheets {
  id                            BigInt                        @id @default(autoincrement())
  locations                     String?                       @db.VarChar
  scientificNamesGNRD           String?                       @db.VarChar
  scientificNamesFlashtext      String?                       @db.VarChar
  day                           String?                       @db.VarChar
  month                         String?                       @db.VarChar
  year                          String?                       @db.VarChar
  checklistAnnotations          String?
  snamesInputs                  String?
  locationsInputs               String?
  datesInputs                   String?
  uploader                      BigInt?
  curatedSName                  String?                       @db.VarChar
  curatedLocation               String?                       @db.VarChar
  curatedDate                   String?                       @db.VarChar
  curatedDateFormat             dateformat?
  sheetId                       BigInt
  lastUpdated                   DateTime?                     @db.Timestamp(6)
  peliasLocations               String?
  taxonomyMatchedNames          String?
  taxonId                       String?
  rank                          String?
  hierarchy                     String?
  longitude                     Float?
  latitude                      Float?
  curatedStatus                 status?                       @default(PENDING)
  locationAccuracy              String?
  validatedStatus               String?                       @default("Not validated")
  country                       String?
  countryCode                   String?
  curatedBy                     String?
  verifiedBy                    String?
  text_curation_sheets_metadata text_curation_sheets_metadata @relation(fields: [sheetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model text_curation_sheets_metadata {
  id                   BigInt                 @id @default(autoincrement())
  title                String?                @db.VarChar
  description          String?                @db.VarChar
  contributors         String?                @db.VarChar
  validators           String?
  text_curation_sheets text_curation_sheets[]
}

model trait {
  id                       BigInt   @id
  created_on               DateTime @db.Timestamp(6)
  data_types               String   @db.VarChar(255)
  description              String?
  field_id                 BigInt
  icon                     String?
  is_deleted               Boolean
  last_revised             DateTime @db.Timestamp(6)
  name                     String   @db.VarChar(255)
  source                   String?  @db.VarChar(255)
  trait_types              String   @db.VarChar(255)
  units                    String?  @db.VarChar(255)
  is_not_observation_trait Boolean? @default(false)
  show_in_observation      Boolean? @default(false)
  is_participatory         Boolean? @default(true)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model trait_taxonomy_definition {
  trait_taxon_id         BigInt?
  taxonomy_definition_id BigInt?

  @@ignore
}

model trait_value {
  id                BigInt  @id
  description       String?
  icon              String? @db.VarChar(255)
  source            String  @db.VarChar(255)
  trait_instance_id BigInt
  value             String  @db.VarChar(255)
  is_deleted        Boolean @default(false)

  @@unique([value, trait_instance_id], map: "trait_value_value_trait_id_key")
}

model ufile {
  id                                               BigInt       @id
  mimetype                                         String?      @db.VarChar(255)
  path                                             String       @db.VarChar(255)
  size                                             String       @db.VarChar(255)
  weight                                           Int
  data_table_data_table_u_file_idToufile           data_table[] @relation("data_table_u_file_idToufile")
  data_table_data_table_images_file_idToufile      data_table[] @relation("data_table_images_file_idToufile")
  data_table_data_table_trait_value_file_idToufile data_table[] @relation("data_table_trait_value_file_idToufile")
  dataset                                          dataset[]
  dataset1                                         dataset1[]
}

model ug_filter_rule {
  id                     BigInt   @id
  has_created_date_rule  Boolean?
  has_observed_date_rule Boolean?
  has_spatial_rule       Boolean?
  has_taxonomic_rule     Boolean?
  has_user_rule          Boolean?
  ug_id                  BigInt?
}

model ug_obv_created_date_rule {
  id         BigInt    @id
  from_date  DateTime? @db.Timestamp(6)
  is_enabled Boolean?
  to_date    DateTime? @db.Timestamp(6)
  ug_id      BigInt?
}

model ug_obv_obsered_date_rule {
  id         BigInt    @id
  from_date  DateTime? @db.Timestamp(6)
  is_enabled Boolean?
  to_date    DateTime? @db.Timestamp(6)
  ug_id      BigInt?
}

model ug_spatial_data {
  id           BigInt   @id
  is_enabled   Boolean?
  spatial_data String?
  ug_id        BigInt?
}

model ug_taxonomic_rule {
  id          BigInt   @id
  is_enabled  Boolean?
  taxonomy_id BigInt?
  ug_id       BigInt?
}

model upload_log {
  id                                              BigInt       @id
  version                                         BigInt
  author_id                                       BigInt
  end_date                                        DateTime?    @db.Timestamp(6)
  error_file_path                                 String?      @db.VarChar(255)
  file_path                                       String?      @db.VarChar(255)
  log_file                                        Bytes?
  log_file_path                                   String?      @db.VarChar(255)
  notes                                           String?
  params_map_as_text                              String?
  start_date                                      DateTime     @db.Timestamp(6)
  status                                          String       @db.VarChar(255)
  upload_type                                     String?      @db.VarChar(255)
  class                                           String       @db.VarChar(255)
  images_dir                                      String?      @db.VarChar(255)
  species_created                                 Int?
  species_updated                                 Int?
  stubs_created                                   Int?
  data_table_id                                   BigInt?
  no_created                                      Int?
  no_updated                                      Int?
  data_table_data_table_upload_log_idToupload_log data_table[] @relation("data_table_upload_log_idToupload_log")
  data_table_upload_log_data_table_idTodata_table data_table?  @relation("upload_log_data_table_idTodata_table", fields: [data_table_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkf187f80650fa501d")
  suser                                           suser        @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkf187f806d7a6cb39")
}

model uploaded_file_metadata {
  id                 BigInt   @id
  file_new_name      String   @db.VarChar(255)
  file_original_name String   @db.VarChar(255)
  movement_date      DateTime @db.Timestamp(6)
  type               String   @db.VarChar(255)
  user_id            BigInt
}

model user_group {
  id                                 BigInt       @id
  allow_members_to_make_species_call Boolean
  allow_non_members_to_comment       Boolean
  allow_obv_cross_posting            Boolean
  allow_users_to_join                Boolean
  description                        String
  domain_name                        String?      @db.VarChar(255)
  founded_on                         DateTime     @db.Timestamp(6)
  home_page                          String?      @db.VarChar(255)
  icon                               String?      @db.VarChar(255)
  is_deleted                         Boolean
  name                               String       @unique @db.VarChar(255)
  ne_latitude                        Float        @db.Real
  ne_longitude                       Float        @db.Real
  sw_latitude                        Float        @db.Real
  sw_longitude                       Float        @db.Real
  theme                              String?      @db.VarChar(255)
  visit_count                        BigInt
  webaddress                         String       @unique @db.VarChar(255)
  language_id                        BigInt
  stat_start_date                    DateTime     @db.Timestamp(6)
  show_gallery                       Boolean?     @default(true)
  show_grid_map                      Boolean?     @default(true)
  show_partners                      Boolean?     @default(true)
  show_recent_obv                    Boolean?     @default(true)
  show_stats                         Boolean?     @default(true)
  show_desc                          Boolean?     @default(false)
  filter_rule                        String?      @db.VarChar(255)
  new_filter_rule                    String?
  send_digest_mail                   Boolean?
  newsletter                         newsletter[]
}

model user_group_cf_mapping {
  id                    BigInt   @id
  allowed_participation Boolean?
  author_id             BigInt?
  custom_field_id       BigInt?
  deafult_value         String?  @db.VarChar(255)
  display_order         Int?
  is_mandatory          Boolean?
  user_group_id         BigInt?
}

model user_group_data_tables {
  data_table_id BigInt
  user_group_id BigInt

  @@id([user_group_id, data_table_id])
}

model user_group_datasets {
  dataset1_id   BigInt
  user_group_id BigInt

  @@id([user_group_id, dataset1_id])
}

model user_group_discussions {
  user_group_id BigInt
  discussion_id BigInt

  @@id([user_group_id, discussion_id])
}

model user_group_documents {
  user_group_id BigInt
  document_id   BigInt

  @@id([user_group_id, document_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model user_group_habitat {
  user_group_habitats_id BigInt?
  habitat_id             BigInt?

  @@ignore
}

model user_group_invitaion {
  id            BigInt  @id
  email         String? @db.VarChar(255)
  invitee_id    BigInt?
  inviter_id    BigInt?
  role_id       BigInt?
  user_group_id BigInt?
}

model user_group_join_request {
  id            BigInt  @id
  user_group_id BigInt?
  user_id       BigInt?
}

model user_group_member_role {
  user_group_id BigInt
  role_id       BigInt
  s_user_id     BigInt

  @@id([user_group_id, role_id, s_user_id])
  @@unique([user_group_id, s_user_id], map: "uknhbb6rd8n7x28b6ft6ijuq3g6")
}

model user_group_observations {
  user_group_id  BigInt
  observation_id BigInt

  @@id([user_group_id, observation_id])
}

model user_group_species {
  species_id    BigInt
  user_group_id BigInt

  @@id([user_group_id, species_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model user_group_species_group {
  user_group_species_groups_id BigInt?
  species_group_id             BigInt?

  @@ignore
}

model usergroup_user_join_request {
  id            BigInt  @id
  user_group_id BigInt?
  user_id       BigInt?
}

enum dateformat {
  DAY
  MONTH
  YEAR
}

enum status {
  PENDING
  CURATED
  REJECTED_OTHER_COMMUNICATION
  REJECTED_NOT_ACCESSIBLE
  REJECTED_OTHER_ORGANISM
  REJECTED_INCOMPLETE
}
